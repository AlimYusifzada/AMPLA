AMPLA is Python implementation for AMPL code analysis.
Read source AMPL code from AAX files
Each logic block represents by an object and could be compared with the other one
There is a plan to upgrade the tool for statistical calculations (inprogress), controller loading calculations
Master copy and latest revision are here: https://github.com/AlimYusifzada/AMPLA.git

You need pyhton version 3 and above to use that tool
At the moment only command line interface is available.

...\your_directory_at_mswindows>python3 aaxcmp.py FileA.aax FileB.aax -l -i -s -h
.../your_directory_at_linux$./aaxcmp.py FileA.aax FileB.axx -l -i -s -h
    
    -i compare logic blocs
    -l compare line by line (system)
    -s print some statistics (in development)
    -h print this help
    position of the options keys in command line, determine the sequence of the output
    AAX files names location in the command line are not fixed but both should be present

In Python environment:

File_A=aax('FileA.aax') create File_A object and parse AMPL code from 'FileA.aax'

File_A.el      dictionary, contain all parsed logic blocks
File_A.header  dictionary, contain FileA.aax file header with keys like 'Rev_ind' or 'Language'

To access AAX revision number use File_A.header['Rev_ind']

File_A.el['PC##.##.##'] contain parsed logic block at 'PC##.##.##'

File_A.el['PC##.##.##']=File_A.el['PC##.##.##']+(pinname,value,value1,..) create new pin with values

File_A.el['PC##.##.##'].addpin(pinname,value) create new pin with one value

File_A.el['PC##.##.##'].addpin(pinname,(value1,value2,..)) create new pin with several values

Compare blocks:

File_B=aax('FileB.aax')

File_A.el['PC##.##.##']==File_B.el['PC##.##.##'] return True if they are equeal

File_A.el['PC##.##.##'].cmp(File_B.el['PC##.##.##']) return string with block comparision report

Compare aax files
File_A.cmp(File_B) return string with files comparision result

File_A.labels dictionary contains all labels
File_A.getlabel('PC##.##.##:pin') return label assigned to that pin or None

